control substitution on

# create database and tables in mysql
system ok
mysql --protocol=tcp -u root -e "DROP DATABASE IF EXISTS mytest; CREATE DATABASE mytest;"

system ok
mysql --protocol=tcp -u root mytest < e2e_test/source/cdc/mysql_create.sql

# generate data to mysql
system ok
mysql --protocol=tcp -u root mytest < e2e_test/source/cdc/mysql_init_data.sql

# create a cdc source job, which format fixed to `FORMAT PLAIN ENCODE JSON`
statement ok
create source mysql_mytest with (
 connector = 'mysql-cdc',
 hostname = '${MYSQL_HOST:localhost}',
 port = '${MYSQL_TCP_PORT:8306}',
 username = 'dbz',
 password = '${MYSQL_PWD:}',
 database.name = 'mytest',
 server.id = '5601'
);

statement ok
create table products_test ( id INT,
 name STRING,
 description STRING,
 PRIMARY KEY (id)
) from mysql_mytest table 'mytest.products';

system ok
mysql --protocol=tcp -u root mytest -e "INSERT INTO products VALUES (default,'Milk','Milk is a white liquid food');
       INSERT INTO orders VALUES (default, '2023-11-28 15:08:22', 'Bob', 10.52, 100, false);"

# check the fragment distribution
query TT
select distribution_type,flags from rw_fragments order by fragment_id;
----
SINGLE {SOURCE}
HASH {MVIEW}
SINGLE {STREAM_SCAN}
SINGLE {CDC_FILTER}
HASH {SOURCE,DML}

statement error
create table non_exist ( id INT,
 name STRING,
 description STRING,
 PRIMARY KEY (id)
) from mysql_mytest table 'mytest.non_exist';


statement ok
create table orders_test (
   order_id int,
   order_date timestamp,
   customer_name string,
   price decimal,
   product_id int,
   order_status smallint,
   PRIMARY KEY (order_id)
) from mysql_mytest table 'mytest.orders';

statement ok
create materialized view products_test_cnt as select count(*) as cnt from products_test;

statement ok
create materialized view orders_test_cnt as select count(*) as cnt from orders_test;

system ok
mysql --protocol=tcp -u root mytest -e "INSERT INTO products VALUES(default, 'Juice', '100ml Juice');"

sleep 5s

# check ingestion results
query I
SELECT * from products_test_cnt
----
11

query I
SELECT * from orders_test_cnt
----
4

query ITT
SELECT * FROM products_test order by id limit 3
----
101 scooter Small 2-wheel scooter
102 car battery 12V car battery
103 12-pack drill bits 12-pack of drill bits with sizes ranging from #40 to #3

query ITTT
SELECT order_id,order_date,customer_name,product_id FROM orders_test order by order_id limit 3
----
10001 2020-07-30 10:08:22 Jark 102
10002 2020-07-30 10:11:09 Sally 105
10003 2020-07-30 12:00:30 Edward 106

statement ok
create source pg_source with (
 connector = 'postgres-cdc',
 hostname = '${PGHOST:localhost}',
 port = '${PGPORT:5432}',
 username = '${PGUSER:$USER}',
 password = '${PGPASSWORD:}',
 database.name = '${PGDATABASE:postgres}',
 slot.name = 'pg_slot'
);

# test postgres backfill data types
statement ok
CREATE TABLE IF NOT EXISTS postgres_all_types(
 c_boolean boolean,
 c_smallint smallint,
 c_integer integer,
 c_bigint bigint,
 c_decimal decimal,
 c_real real,
 c_double_precision double precision,
 c_varchar varchar,
 c_bytea bytea,
 c_date date,
 c_time time,
 c_timestamp timestamp,
 c_timestamptz timestamptz,
 c_interval interval,
 c_jsonb jsonb,
 c_boolean_array boolean[],
 c_smallint_array smallint[],
 c_integer_array integer[],
 c_bigint_array bigint[],
 c_decimal_array decimal[],
 c_real_array real[],
 c_double_precision_array double precision[],
 c_varchar_array varchar[],
 c_bytea_array bytea[],
 c_date_array date[],
 c_time_array time[],
 c_timestamp_array timestamp[],
 c_timestamptz_array timestamptz[],
 c_interval_array interval[],
 c_jsonb_array jsonb[],
 PRIMARY KEY (c_boolean,c_bigint,c_date)
) from pg_source table 'public.postgres_all_types';

sleep 3s

query TTTTTTT
SELECT c_boolean,c_date,c_time,c_timestamp,c_jsonb,c_smallint_array,c_timestamp_array FROM postgres_all_types where c_bigint=-9223372036854775807
----
f 0001-01-01 00:00:00 0001-01-01 00:00:00 {} {-32767} {"0001-01-01 00:00:00"}
