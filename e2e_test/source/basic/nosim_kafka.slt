# Start with nosim to avoid running in deterministic test


# key schema should be a subset of value schema
statement error
CREATE TABLE upsert_avro_json ()
WITH (
	connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
	topic = 'upsert_avro_json')
ROW FORMAT UPSERT_AVRO (schema.registry = 'http://message_queue:8081');


# key schema should be a subset of value schema
statement error
CREATE TABLE upsert_student_key_not_subset_of_value_avro_json ()
WITH (
	connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
	topic = 'upsert_student_key_not_subset_of_value_avro_json')
ROW FORMAT UPSERT_AVRO (schema.registry = 'http://message_queue:8081');


statement ok
CREATE TABLE upsert_student_avro_json ()
WITH (
	connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
	topic = 'upsert_student_avro_json')
ROW FORMAT UPSERT_AVRO (schema.registry = 'http://message_queue:8081');


statement ok
CREATE TABLE upsert_avro_json (
  PRIMARY KEY("ID")
)
WITH (
connector = 'kafka',
 properties.bootstrap.server = 'message_queue:29092',
topic = 'upsert_avro_json')
ROW FORMAT UPSERT_AVRO (schema.registry = 'http://message_queue:8081');

# Just ignore the kafka key, it works
statement ok
CREATE TABLE upsert_avro_json2 (
  PRIMARY KEY("ID")
)
WITH (
	connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
	topic = 'upsert_avro_json')
ROW FORMAT UPSERT_AVRO (schema.registry = 'http://message_queue:8081');

statement ok
CREATE TABLE debezium_non_compact (PRIMARY KEY(order_id)) with (
    connector = 'kafka',
    kafka.topic = 'debezium_non_compact_avro_json',
    kafka.brokers = 'message_queue:29092',
    kafka.scan.startup.mode = 'earliest'
) ROW FORMAT DEBEZIUM_AVRO (schema.registry = 'http://message_queue:8081');


statement ok
CREATE TABLE debezium_compact (PRIMARY KEY(order_id)) with (
    connector = 'kafka',
    kafka.topic = 'debezium_compact_avro_json',
    kafka.brokers = 'message_queue:29092',
    kafka.scan.startup.mode = 'earliest'
) ROW FORMAT DEBEZIUM_AVRO (schema.registry = 'http://message_queue:8081');

statement ok
flush;

statement ok
CREATE TABLE debezium_add_column_after_create_table (PRIMARY KEY(order_id)) with (
    connector = 'kafka',
    kafka.topic = 'debezium_add_column_after_create_table_avro_json',
    kafka.brokers = 'message_queue:29092',
    kafka.scan.startup.mode = 'earliest'
) ROW FORMAT DEBEZIUM_AVRO (schema.registry = 'http://message_queue:8081');

statement ok
flush;

statement ok
CREATE TABLE debezium_add_column_before_create_table (PRIMARY KEY(order_id)) with (
    connector = 'kafka',
    kafka.topic = 'debezium_add_column_before_create_table_avro_json',
    kafka.brokers = 'message_queue:29092',
    kafka.scan.startup.mode = 'earliest'
) ROW FORMAT DEBEZIUM_AVRO (schema.registry = 'http://message_queue:8081');

statement ok
flush;

statement ok
CREATE TABLE debezium_drop_column_after_create_table (PRIMARY KEY(order_id)) with (
    connector = 'kafka',
    kafka.topic = 'debezium_drop_column_after_create_table_avro_json',
    kafka.brokers = 'message_queue:29092',
    kafka.scan.startup.mode = 'earliest'
) ROW FORMAT DEBEZIUM_AVRO (schema.registry = 'http://message_queue:8081');

statement ok
flush;

statement ok
CREATE TABLE debezium_drop_column_before_create_table (PRIMARY KEY(order_id)) with (
    connector = 'kafka',
    kafka.topic = 'debezium_drop_column_before_create_table_avro_json',
    kafka.brokers = 'message_queue:29092',
    kafka.scan.startup.mode = 'earliest'
) ROW FORMAT DEBEZIUM_AVRO (schema.registry = 'http://message_queue:8081');

statement ok
flush;

# Wait enough time to ensure SourceExecutor consumes all Kafka data.
sleep 5s


query II
SELECT
 *
FROM
 upsert_avro_json
ORDER BY
 "ID";
----
update id1 -1 6768 6970 value9 7172 info9 2021-05-18T07:59:58.714Z
delete id2 2 7778 7980 value10 8182 info10 2021-05-19T15:22:45.539Z
delete id3 3 7778 7980 value10 8182 info10 2021-05-19T15:22:45.539Z
delete id5 5 7778 7980 value10 8182 info10 2021-05-19T15:22:45.539Z


query II
SELECT
	*
FROM
	upsert_avro_json2
ORDER BY
	"ID";
----
update id1 -1 6768 6970 value9 7172 info9 2021-05-18T07:59:58.714Z
delete id2 2 7778 7980 value10 8182 info10 2021-05-19T15:22:45.539Z
delete id3 3 7778 7980 value10 8182 info10 2021-05-19T15:22:45.539Z
delete id5 5 7778 7980 value10 8182 info10 2021-05-19T15:22:45.539Z


query II
SELECT
 *
FROM
 upsert_student_avro_json
ORDER BY
 "ID";
----
1 Ethan Martinez 18 6.1 180
2 Emily Jackson 19 5.4 110
3 Noah Thompson 21 6.3 195
4 Emma Brown 20 5.3 130
5 Michael Williams 22 6.2 190
6 Leah Davis 18 5.7 140
9 Jacob Anderson 20 5.8 155

query I
select count(*) from debezium_non_compact;
----
2

query I
select count(*) from debezium_compact;
----
2

# customer_name is absent in RW table schema but present in new rows
query II
SELECT * FROM debezium_add_column_after_create_table
ORDER BY order_id;
----
2 1558430840001 2 1
3 1558430840002 2 1

# customer_name is present in RW table schema and present in new rows
query II
SELECT * FROM debezium_add_column_before_create_table
ORDER BY order_id;
----
2 1558430840001 NULL 2 1
3 1558430840002 Alice 2 1

# customer_name is present in RW table schema but absent in new rows
query II
SELECT * FROM debezium_drop_column_after_create_table
ORDER BY order_id;
----
2 1558430840001 Alice 2 1
3 1558430840002 NULL 2 1

# customer_name is absent in RW table schema and absent in new rows
query II
SELECT * FROM debezium_drop_column_before_create_table
ORDER BY order_id;
----
2 1558430840001 2 1
3 1558430840002 2 1

statement ok
DROP TABLE upsert_avro_json;


statement ok
DROP TABLE upsert_avro_json2;

statement ok
DROP TABLE upsert_student_avro_json;

statement ok
DROP TABLE debezium_non_compact;

statement ok
DROP TABLE debezium_compact;

statement ok
DROP TABLE debezium_add_column_after_create_table;

statement ok
DROP TABLE debezium_add_column_before_create_table;

statement ok
DROP TABLE debezium_drop_column_after_create_table;

statement ok
DROP TABLE debezium_drop_column_before_create_table;