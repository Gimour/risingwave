# This file is automatically generated. See `src/sqlparser/test_runner/src/bin/apply.rs` for more information.
- input: select array_transform(array[1,2,3], (x) -> x * 2)
  formatted_sql: SELECT array_transform(ARRAY[1, 2, 3], (x) -> x * 2)
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Function(Function { name: ObjectName([Ident { value: "array_transform", quote_style: None }]), args: [Unnamed(Expr(Array(Array { elem: [Value(Number("1")), Value(Number("2")), Value(Number("3"))], named: true }))), Unnamed(Expr(LambdaFunction { args: [Ident { value: "x", quote_style: None }], body: BinaryOp { left: Identifier(Ident { value: "x", quote_style: None }), op: Multiply, right: Value(Number("2")) } }))], over: None, distinct: false, order_by: [], filter: None, within_group: None }))], from: [], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select array_transform(array[], (s) -> case when s ilike 'apple%' then 'apple' when s ilike 'google%' then 'google' else 'unknown' end)
  formatted_sql: SELECT array_transform(ARRAY[], (s) -> CASE WHEN s ILIKE 'apple%' THEN 'apple' WHEN s ILIKE 'google%' THEN 'google' ELSE 'unknown' END)
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Function(Function { name: ObjectName([Ident { value: "array_transform", quote_style: None }]), args: [Unnamed(Expr(Array(Array { elem: [], named: true }))), Unnamed(Expr(LambdaFunction { args: [Ident { value: "s", quote_style: None }], body: Case { operand: None, conditions: [BinaryOp { left: Identifier(Ident { value: "s", quote_style: None }), op: ILike, right: Value(SingleQuotedString("apple%")) }, BinaryOp { left: Identifier(Ident { value: "s", quote_style: None }), op: ILike, right: Value(SingleQuotedString("google%")) }], results: [Value(SingleQuotedString("apple")), Value(SingleQuotedString("google"))], else_result: Some(Value(SingleQuotedString("unknown"))) } }))], over: None, distinct: false, order_by: [], filter: None, within_group: None }))], from: [], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select jsonb_typeof(x->'v1') from t
  formatted_sql: SELECT jsonb_typeof(x -> 'v1') FROM t
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Function(Function { name: ObjectName([Ident { value: "jsonb_typeof", quote_style: None }]), args: [Unnamed(Expr(BinaryOp { left: Identifier(Ident { value: "x", quote_style: None }), op: Arrow, right: Value(SingleQuotedString("v1")) }))], over: None, distinct: false, order_by: [], filter: None, within_group: None }))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "t", quote_style: None }]), alias: None, for_system_time_as_of_proctime: false }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select jsonb_typeof((x)->'v1') from t
  formatted_sql: SELECT jsonb_typeof((x) -> 'v1') FROM t
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Function(Function { name: ObjectName([Ident { value: "jsonb_typeof", quote_style: None }]), args: [Unnamed(Expr(LambdaFunction { args: [Ident { value: "x", quote_style: None }], body: Value(SingleQuotedString("v1")) }))], over: None, distinct: false, order_by: [], filter: None, within_group: None }))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "t", quote_style: None }]), alias: None, for_system_time_as_of_proctime: false }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select ('{"a":1}'::jsonb) -> 'a';
  formatted_sql: SELECT (CAST('{"a":1}' AS jsonb)) -> 'a'
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(BinaryOp { left: Nested(Cast { expr: Value(SingleQuotedString("{\"a\":1}")), data_type: Custom(ObjectName([Ident { value: "jsonb", quote_style: None }])) }), op: Arrow, right: Value(SingleQuotedString("a")) })], from: [], lateral_views: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })'
